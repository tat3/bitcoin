let -- TxInの作成
  outTxId  = toChars . BS.reverse $ readHex "247b3712423da29dcdcf1819e53e1eb0da4bd117a7205fb90b5014d881a14df2"
  outPoint = OutPoint outTxId 0x00
  txIn xs  = TxIn outPoint xs 0xFFFFFFFF

secKey <- fromJust <$> getWalletSecretKey

let -- TxOutの作成
  balance = 200000000
  amount  =  20000000
  fee     =  10000000

  toAddress        = "2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF"
  toPubKeyHashed   = fromJust $ decodeAddress toAddress
  fromPubKey       = exportPubKey False $ derivePubKey secKey
  fromPubKeyHashed = hash160 fromPubKey

  lockingScript1 = VarStr.fromByteString $ BS.concat [op_hash160, op_pushdata, toPubKeyHashed, op_equal]
  lockingScript2 = VarStr.fromByteString $ BS.concat [op_dup, op_hash160, op_pushdata, fromPubKeyHashed, op_equalverify, op_checksig]

  txOut1 = TxOut amount                   lockingScript1
  txOut2 = TxOut (balance - amount - fee) lockingScript2
